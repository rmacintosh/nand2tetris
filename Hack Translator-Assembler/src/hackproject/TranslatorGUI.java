/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hackproject;

import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Ryan
 */
public class TranslatorGUI extends javax.swing.JFrame {
    // Private TranslatorGUI class fields
    private boolean                 canTranslate;
    private boolean                 canAssemble;
    private boolean                 canSaveASM;
    private boolean                 canSaveHACK;
    private Translator              hackTranslator;
    private Assembler               hackAssembler;
    private JFileChooser            hackFileChooser;
    private FileNameExtensionFilter asmFilter;
    private FileNameExtensionFilter vmFilter;
    private FileNameExtensionFilter hackFilter;
    
    /**
     * Creates new form TranslatorGUI
     */
    public TranslatorGUI() {
        initComponents();
        hackFileChooser = new JFileChooser();
        ImageIcon appIcon = new ImageIcon(getClass().getResource("images/appTopCornerLogo.png")); 
        this.setIconImage(appIcon.getImage());                                      // Change standard application icon in top left corner of window
        canTranslate = false;
        canAssemble  = false;
        canSaveHACK  = false;
        canSaveASM   = false;
        asmFilter    = new FileNameExtensionFilter("ASM Files", "asm");
        vmFilter     = new FileNameExtensionFilter("VM Files", "vm");
        hackFilter   = new FileNameExtensionFilter("HACK Files", "hack");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        vmCodeScrollPane = new javax.swing.JScrollPane();
        vmCodeTextArea = new javax.swing.JTextArea();
        vmCodeLabel = new javax.swing.JLabel();
        asmCodeScrollPane = new javax.swing.JScrollPane();
        asmCodeTextArea = new javax.swing.JTextArea();
        asmCodeLabel = new javax.swing.JLabel();
        translatorToolBar = new javax.swing.JToolBar();
        unloadButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(250, 0), new java.awt.Dimension(250, 0), new java.awt.Dimension(250, 32767));
        saveButton = new javax.swing.JButton();
        translatorButton = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(250, 0), new java.awt.Dimension(250, 0), new java.awt.Dimension(250, 32767));
        saveButtonHack = new javax.swing.JButton();
        translatorButtonHack = new javax.swing.JButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(200, 0), new java.awt.Dimension(200, 0), new java.awt.Dimension(200, 32767));
        aboutButton = new javax.swing.JButton();
        midSeparator = new javax.swing.JSeparator();
        hackCodeScrollPane = new javax.swing.JScrollPane();
        hackCodeTextArea = new javax.swing.JTextArea();
        midSeparator1 = new javax.swing.JSeparator();
        hackCodeLabel = new javax.swing.JLabel();
        translatorMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        saveItemHack = new javax.swing.JMenuItem();
        fileSeparator = new javax.swing.JPopupMenu.Separator();
        exitItem = new javax.swing.JMenuItem();
        runMenu = new javax.swing.JMenu();
        translateMenuItem = new javax.swing.JMenuItem();
        assembleMenuItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hack Assembler");
        setBackground(new java.awt.Color(212, 228, 221));
        setResizable(false);

        vmCodeTextArea.setEditable(false);
        vmCodeTextArea.setColumns(20);
        vmCodeTextArea.setLineWrap(true);
        vmCodeTextArea.setRows(5);
        vmCodeTextArea.setMinimumSize(new java.awt.Dimension(470, 300));
        vmCodeTextArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                vmCodeTextAreaCaretUpdate(evt);
            }
        });
        vmCodeScrollPane.setViewportView(vmCodeTextArea);

        vmCodeLabel.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        vmCodeLabel.setForeground(new java.awt.Color(1, 102, 153));
        vmCodeLabel.setText("VM Code:");

        asmCodeTextArea.setEditable(false);
        asmCodeTextArea.setColumns(20);
        asmCodeTextArea.setLineWrap(true);
        asmCodeTextArea.setRows(5);
        asmCodeTextArea.setWrapStyleWord(true);
        asmCodeTextArea.setMinimumSize(new java.awt.Dimension(470, 300));
        asmCodeTextArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                asmCodeTextAreaCaretUpdate(evt);
            }
        });
        asmCodeScrollPane.setViewportView(asmCodeTextArea);

        asmCodeLabel.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        asmCodeLabel.setForeground(new java.awt.Color(0, 102, 153));
        asmCodeLabel.setText("Translated Assembly Code:");

        translatorToolBar.setBackground(new java.awt.Color(224, 223, 223));
        translatorToolBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        translatorToolBar.setFloatable(false);
        translatorToolBar.setRollover(true);
        translatorToolBar.setMaximumSize(new java.awt.Dimension(4000, 36));
        translatorToolBar.setPreferredSize(new java.awt.Dimension(687, 36));

        unloadButton.setBackground(new java.awt.Color(224, 223, 223));
        unloadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/close.png"))); // NOI18N
        unloadButton.setToolTipText("Unloads current file/data");
        unloadButton.setEnabled(false);
        unloadButton.setFocusable(false);
        unloadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        unloadButton.setMaximumSize(new java.awt.Dimension(50, 50));
        unloadButton.setMinimumSize(new java.awt.Dimension(32, 32));
        unloadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        unloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unloadButtonActionPerformed(evt);
            }
        });
        translatorToolBar.add(unloadButton);

        openButton.setBackground(new java.awt.Color(224, 223, 223));
        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/opendoc.gif"))); // NOI18N
        openButton.setToolTipText("Open VM file");
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setMaximumSize(new java.awt.Dimension(50, 50));
        openButton.setMinimumSize(new java.awt.Dimension(32, 32));
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        translatorToolBar.add(openButton);
        translatorToolBar.add(filler1);

        saveButton.setBackground(new java.awt.Color(224, 223, 223));
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/save.png"))); // NOI18N
        saveButton.setToolTipText("Save ASM file");
        saveButton.setEnabled(false);
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setMaximumSize(new java.awt.Dimension(50, 50));
        saveButton.setMinimumSize(new java.awt.Dimension(32, 32));
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        translatorToolBar.add(saveButton);

        translatorButton.setBackground(new java.awt.Color(224, 223, 223));
        translatorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/hex.gif"))); // NOI18N
        translatorButton.setToolTipText("Translates loaded VM file to ASM");
        translatorButton.setEnabled(false);
        translatorButton.setFocusable(false);
        translatorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        translatorButton.setMaximumSize(new java.awt.Dimension(50, 50));
        translatorButton.setMinimumSize(new java.awt.Dimension(32, 32));
        translatorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        translatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                translatorButtonActionPerformed(evt);
            }
        });
        translatorToolBar.add(translatorButton);
        translatorToolBar.add(filler2);

        saveButtonHack.setBackground(new java.awt.Color(224, 223, 223));
        saveButtonHack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/save.png"))); // NOI18N
        saveButtonHack.setToolTipText("Save HACK file");
        saveButtonHack.setEnabled(false);
        saveButtonHack.setFocusable(false);
        saveButtonHack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButtonHack.setMaximumSize(new java.awt.Dimension(50, 50));
        saveButtonHack.setMinimumSize(new java.awt.Dimension(32, 32));
        saveButtonHack.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButtonHack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonHackActionPerformed(evt);
            }
        });
        translatorToolBar.add(saveButtonHack);

        translatorButtonHack.setBackground(new java.awt.Color(224, 223, 223));
        translatorButtonHack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/hex.gif"))); // NOI18N
        translatorButtonHack.setToolTipText("Translates ASM code to HACK");
        translatorButtonHack.setEnabled(false);
        translatorButtonHack.setFocusable(false);
        translatorButtonHack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        translatorButtonHack.setMaximumSize(new java.awt.Dimension(50, 50));
        translatorButtonHack.setMinimumSize(new java.awt.Dimension(32, 32));
        translatorButtonHack.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        translatorButtonHack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                translatorButtonHackActionPerformed(evt);
            }
        });
        translatorToolBar.add(translatorButtonHack);
        translatorToolBar.add(filler3);

        aboutButton.setBackground(new java.awt.Color(224, 223, 223));
        aboutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/about.gif"))); // NOI18N
        aboutButton.setToolTipText("About Assembler");
        aboutButton.setFocusable(false);
        aboutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        aboutButton.setMaximumSize(new java.awt.Dimension(50, 50));
        aboutButton.setMinimumSize(new java.awt.Dimension(32, 32));
        aboutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });
        translatorToolBar.add(aboutButton);

        midSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        hackCodeTextArea.setEditable(false);
        hackCodeTextArea.setColumns(20);
        hackCodeTextArea.setLineWrap(true);
        hackCodeTextArea.setRows(5);
        hackCodeTextArea.setMinimumSize(new java.awt.Dimension(470, 300));
        hackCodeTextArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                hackCodeTextAreaCaretUpdate(evt);
            }
        });
        hackCodeScrollPane.setViewportView(hackCodeTextArea);

        midSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        hackCodeLabel.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        hackCodeLabel.setForeground(new java.awt.Color(0, 102, 153));
        hackCodeLabel.setText("Assembled Hack Code:");

        fileMenu.setText("File");

        loadItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/open.gif"))); // NOI18N
        loadItem.setText("Load VM File");
        loadItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadItem);

        saveItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/saveSmall.gif"))); // NOI18N
        saveItem.setText("Save Translated ASM File");
        saveItem.setEnabled(false);
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);

        saveItemHack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/saveSmall.gif"))); // NOI18N
        saveItemHack.setText("Save Assembled Hack File");
        saveItemHack.setEnabled(false);
        saveItemHack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemHackActionPerformed(evt);
            }
        });
        fileMenu.add(saveItemHack);
        fileMenu.add(fileSeparator);

        exitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/cancel.gif"))); // NOI18N
        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitItem);

        translatorMenuBar.add(fileMenu);

        runMenu.setText("Run");

        translateMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/hexSmall.png"))); // NOI18N
        translateMenuItem.setText("Translate VM File to Assembly Code");
        translateMenuItem.setEnabled(false);
        translateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                translateMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(translateMenuItem);

        assembleMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/hexSmall.png"))); // NOI18N
        assembleMenuItem.setText("Assemble code to Hack");
        assembleMenuItem.setEnabled(false);
        assembleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assembleMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(assembleMenuItem);

        translatorMenuBar.add(runMenu);

        aboutMenu.setText("About");

        aboutItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hackproject/images/aboutSmall.gif"))); // NOI18N
        aboutItem.setText("About Hack Translator");
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItemActionPerformed(evt);
            }
        });
        aboutMenu.add(aboutItem);

        translatorMenuBar.add(aboutMenu);

        setJMenuBar(translatorMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(translatorToolBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(vmCodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vmCodeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addComponent(midSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(asmCodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(asmCodeScrollPane))
                .addGap(15, 15, 15)
                .addComponent(midSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hackCodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hackCodeScrollPane))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(translatorToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vmCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(asmCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hackCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(midSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                    .addComponent(midSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                    .addComponent(vmCodeScrollPane)
                    .addComponent(asmCodeScrollPane)
                    .addComponent(hackCodeScrollPane))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadItemActionPerformed
        // Limit file chooser to only show *.asm files /w no 'all files' option
        hackFileChooser.resetChoosableFileFilters();
        hackFileChooser.setFileFilter(vmFilter);
        hackFileChooser.setAcceptAllFileFilterUsed(false);
        hackFileChooser.setSelectedFile(new File("file.vm"));
        hackFileChooser.setMultiSelectionEnabled(true);
        hackFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        
        if (hackFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {  // Proceed if we selected a file and clicked 'ok'
            File[] vmFiles = hackFileChooser.getSelectedFiles();                    // Get file we selected
            File vmFile = vmFiles[0];
            if(vmFile.isFile()) {
                hackFileChooser.setCurrentDirectory(vmFile.getParentFile());
            } else if(vmFile.isDirectory()) {
                hackFileChooser.setCurrentDirectory(vmFile);
                vmFiles = vmFile.listFiles(new FilenameFilter() {
                    @Override
                    public boolean accept(File vmFile, String name) {
                    return name.toLowerCase().endsWith(".vm");
                    }
                });
            } else {
                JOptionPane.showMessageDialog(this, "FILE ERROR!\nSelected file does not exist!", "Open File Error", JOptionPane.OK_OPTION);
            }
            if(vmFiles.length > 1) {                                                // Selected multiple files
                hackTranslator = new Translator(vmFiles);
            } else {
                vmFile = vmFiles[0];
                hackTranslator = new Translator(vmFile);
            }
            vmCodeTextArea.setText(null);                                           // clear text area
            canTranslate = true;
            vmCodeTextArea.setText(hackTranslator.getFileContents());               // Display file contents in text area
        }
    }//GEN-LAST:event_loadItemActionPerformed

    private void aboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutItemActionPerformed
        JOptionPane.showMessageDialog(null, "Hack Translator\n\nCreated by Ryan MacIntosh\n\n  © 2012 - All Rights Reserved", "Hack Translator", JOptionPane.OK_OPTION, new ImageIcon(TranslatorGUI.class.getResource("images/appTopCornerLogo.png")));
    }//GEN-LAST:event_aboutItemActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        loadItemActionPerformed(evt);                                               // Same event..invoked from toolbar not menu
    }//GEN-LAST:event_openButtonActionPerformed

    private void translateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_translateMenuItemActionPerformed
        if(vmCodeTextArea.getRows() > 0 && canTranslate) {                          // Make sure load item has run first, and that it contained something to assemble
            asmCodeTextArea.setText(null);                                          // Clear the text area
            canSaveASM = true;
            canAssemble = true;
            asmCodeTextArea.setText(hackTranslator.getASMCode());
        } else {
            asmCodeTextArea.setText("There is nothing to translate!");
        }
        canTranslate = false;
    }//GEN-LAST:event_translateMenuItemActionPerformed

    private void translatorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_translatorButtonActionPerformed
        translateMenuItemActionPerformed(evt);                                      // Same event..invoked from toolbar not menu
    }//GEN-LAST:event_translatorButtonActionPerformed

    private void vmCodeTextAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_vmCodeTextAreaCaretUpdate
        if((vmCodeTextArea.getCaretPosition() != 0) && canTranslate) {
            translatorButton.setEnabled(canTranslate);
            translateMenuItem.setEnabled(canTranslate);
            unloadButton.setEnabled(true);
            openButton.setEnabled(false);
            loadItem.setEnabled(false);
        } else {
            if(translatorButton.isEnabled()) {
                canTranslate = false;
                translatorButton.setEnabled(canTranslate);
                translateMenuItem.setEnabled(canTranslate);
            }
        }
    }//GEN-LAST:event_vmCodeTextAreaCaretUpdate

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        saveItemActionPerformed(evt);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        saveItem(".asm", asmFilter, asmCodeTextArea);
    }//GEN-LAST:event_saveItemActionPerformed

    private void asmCodeTextAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_asmCodeTextAreaCaretUpdate
        if((asmCodeTextArea.getCaretPosition() != 0) && canSaveASM) {
            saveButton.setEnabled(canSaveASM);
            saveItem.setEnabled(canSaveASM);
            canTranslate = false;
            canAssemble = true;
            translatorButton.setEnabled(canTranslate);
            translateMenuItem.setEnabled(canTranslate);
            translatorButtonHack.setEnabled(canAssemble);
            assembleMenuItem.setEnabled(canAssemble);
        } else {
            if(saveButton.isEnabled()) {
                canSaveASM = false;
                saveButton.setEnabled(canSaveASM);
                saveItem.setEnabled(canSaveASM);
            }
            if(translatorButtonHack.isEnabled()) {
                canAssemble = false;
                translatorButtonHack.setEnabled(canAssemble);
                assembleMenuItem.setEnabled(canAssemble);
            }
        }
    }//GEN-LAST:event_asmCodeTextAreaCaretUpdate

    private void unloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unloadButtonActionPerformed
        canSaveASM = false;
        canSaveHACK = false;
        canTranslate = false;
        canAssemble = false;
        openButton.setEnabled(true);
        loadItem.setEnabled(true);
        asmCodeTextArea.setText(null);                                              // Clear the text area
        vmCodeTextArea.setText(null);                                               // Clear the text area
        hackCodeTextArea.setText(null);                                             // Clear the text area
        hackTranslator.unload();
        unloadButton.setEnabled(false);
    }//GEN-LAST:event_unloadButtonActionPerformed

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        aboutItemActionPerformed(evt);
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void hackCodeTextAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_hackCodeTextAreaCaretUpdate
        if((hackCodeTextArea.getCaretPosition() != 0) && canSaveHACK) {
            saveButtonHack.setEnabled(canSaveHACK);
            saveItemHack.setEnabled(canSaveHACK);
            canAssemble = false;
            translatorButtonHack.setEnabled(canAssemble);
            assembleMenuItem.setEnabled(canAssemble);
        } else {
            if(saveButtonHack.isEnabled()) {
                canSaveHACK = false;
                saveButtonHack.setEnabled(canSaveHACK);
                saveItemHack.setEnabled(canSaveHACK);
            }
        }
    }//GEN-LAST:event_hackCodeTextAreaCaretUpdate

    private void translatorButtonHackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_translatorButtonHackActionPerformed
        assembleMenuItemActionPerformed(evt);
    }//GEN-LAST:event_translatorButtonHackActionPerformed

    private void saveButtonHackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonHackActionPerformed
        saveItemHackActionPerformed(evt);
    }//GEN-LAST:event_saveButtonHackActionPerformed

    private void saveItemHackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemHackActionPerformed
        saveItem(".hack", hackFilter, hackCodeTextArea);
    }//GEN-LAST:event_saveItemHackActionPerformed

    private void assembleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assembleMenuItemActionPerformed
        hackAssembler = new Assembler(asmCodeTextArea.getText());
        hackAssembler.buildSymbolTable();
        if(asmCodeTextArea.getRows() > 0 && canAssemble) {                          // Make sure load item has run first, and that it contained something to assemble
            hackCodeTextArea.setText(null);                                         // Clear the text area
            canSaveHACK = true;
            hackCodeTextArea.setText(hackAssembler.getHackCode());
        } else {
            hackCodeTextArea.setText("There is nothing to assemble!");
        }
        canAssemble = false;
    }//GEN-LAST:event_assembleMenuItemActionPerformed

    private void saveItem(String extension, FileNameExtensionFilter myFilter, javax.swing.JTextArea myTextArea) {
        // Limit file chooser to only show *.(extension) files /w no 'all files' option
        hackFileChooser.resetChoosableFileFilters();
        hackFileChooser.setFileFilter(myFilter);
        hackFileChooser.setAcceptAllFileFilterUsed(false);
        hackFileChooser.setSelectedFile(new File(hackTranslator.getFileName() + extension));
        
        boolean doSave = false;
        if(hackFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {   // Didn't cancel out of save dialog window
            doSave = true;
        }

        boolean overrideExistingFile = false;
        File hackSaveFile = new File(hackFileChooser.getSelectedFile().getAbsolutePath());

        while(doSave && hackSaveFile.exists() && !overrideExistingFile) {           // Keep showing save dialog until either overwrite of existing file is confirmed or we provide a different filename
            overrideExistingFile = (JOptionPane.showConfirmDialog(this, "File already exists!\nReplace file?", "Save File", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION);
            if(!overrideExistingFile) {
                if (hackFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                    hackSaveFile = new File(hackFileChooser.getSelectedFile().getAbsolutePath());
                } else {
                    doSave = false;
                }             
            }
        }
        if(doSave) {
            FileWriter fw = null;
            try {
                String filePath = hackSaveFile.getPath();
                if(!filePath.toLowerCase().endsWith(extension)) {                   // Make sure we save file with the extension of .(extension)
                    hackSaveFile = new File(filePath + extension);
                }
                String hackData = myTextArea.getText();
                fw = new FileWriter(hackSaveFile);
                fw.write(hackData);
            } catch (IOException ex) {
                Logger.getLogger(TranslatorGUI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    fw.close();
                } catch (IOException ex) {
                    Logger.getLogger(TranslatorGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TranslatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TranslatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TranslatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TranslatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TranslatorGUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JLabel asmCodeLabel;
    private javax.swing.JScrollPane asmCodeScrollPane;
    private javax.swing.JTextArea asmCodeTextArea;
    private javax.swing.JMenuItem assembleMenuItem;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator fileSeparator;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JLabel hackCodeLabel;
    private javax.swing.JScrollPane hackCodeScrollPane;
    private javax.swing.JTextArea hackCodeTextArea;
    private javax.swing.JMenuItem loadItem;
    private javax.swing.JSeparator midSeparator;
    private javax.swing.JSeparator midSeparator1;
    private javax.swing.JButton openButton;
    private javax.swing.JMenu runMenu;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveButtonHack;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JMenuItem saveItemHack;
    private javax.swing.JMenuItem translateMenuItem;
    private javax.swing.JButton translatorButton;
    private javax.swing.JButton translatorButtonHack;
    private javax.swing.JMenuBar translatorMenuBar;
    private javax.swing.JToolBar translatorToolBar;
    private javax.swing.JButton unloadButton;
    private javax.swing.JLabel vmCodeLabel;
    private javax.swing.JScrollPane vmCodeScrollPane;
    private javax.swing.JTextArea vmCodeTextArea;
    // End of variables declaration//GEN-END:variables
}
